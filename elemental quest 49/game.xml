<!--
Welcome into this ant buildfile. For more information about ant see http://ant.apache.org/
 
Main objective is to distribute your game as:
 - lwjgl applet
 - fatjar
 - webstart
 
 This build script will create following directories and files:
 - dist/
 - bin/
 - ${user.home}/.keystore
 
 Dependencies:
 - external/jnlp-ant-task.jar, http://ovanttasks.svn.sourceforge.net
 - external/lwjglApplet
-->
<project name="Game Distribution" basedir="." default="webstart">
    <!-- The name of your game. Don't use spaces -->
    <property name="game.name" value="Elemental-Quest">
 
    <!--
          The class with the Main method. It's preferred to put your main method
          into a class that extends BasicGame or StateBasedGame. As applets ignore
          the main method.
      -->
    <property name="game.main.class" value="diverse.Main">
 
    <!-- The java version you used to develop your game -->
    <property name="game.java.version" value="1.7">
 
    <!-- Webstart properties -->
    <property name="webstart.title" value="Elemental_Quest">
    <property name="webstart.description" value="A basic game">
    <property name="webstart.vendor" value="nemo9955">
    <property name="webstart.homepage" value="http://yourwebsite.com">
    <!-- To run webstart online, change . to the directory of the jnlp file on your website. -->
    <property name="webstart.codebase" value=".">
 
    <!-- Applet properties -->
    <property name="applet.title" value="${game.name}">
    <property name="applet.width" value="800">
    <property name="applet.height" value="600">
 
    <!-- The directories -->
    <property name="src.dir" value="src">
    <property name="res.dir" value="res">
    <property name="lib.dir" value="lib">
    <property name="dist.dir" value="dist">
    <property name="build.dir" value="bin">
    <property name="keystore.file.name" value="${user.home}/.keystore">
 
    <taskdef name="jnlp" classname="com.orangevolt.tools.ant.JNLPTask">
        <classpath location="external/jnlp-ant-task.jar">
    </classpath></taskdef>
 
    <path id="build.path">
        <fileset dir="${lib.dir}">
            <include name="*.jar">
        </include></fileset>
    </path>
<pre>   <target name="clean" description="Clean distribution and output directories">
       <delete includeemptydirs="true" failonerror="false" quiet="true">
           <fileset dir="${build.dir}">
           <fileset dir="${dist.dir}">
       </fileset></fileset></delete>
</target></pre>
<pre>       <fail message="Unable to delete previous build directories">
           <condition>
               <or>
                   <available file="${dist.dir}" type="dir">
                   <available file="${build.dir}" type="dir">
               </available></available></or>
           </condition>
       </fail>
    
</pre>
<pre>   <target name="dir" depends="clean" description="Create directories">
       <mkdir dir="${build.dir}">
       <mkdir dir="${dist.dir}">
   </mkdir></mkdir></target>
</pre>
<pre>   <target name="compile" depends="dir" description="Compile source code">
       <javac srcdir="${src.dir}" destdir="${build.dir}" classpathref="build.path" includeantruntime="false" debug="on" fork="true" source="${game.java.version}" target="${game.java.version}">
       </javac>
   </target>
</pre>
<pre>   <target name="jar-source" depends="compile" description="Create distribution jar -> dist/${game.name}.jar">
       <!-- Jar the compiled source -->
       <jar destfile="${dist.dir}/${game.name}.jar">
           <fileset dir="${build.dir}">
       </fileset></jar>
</target></pre>
<pre>       <!-- Delete the compiled source files -->
       <delete dir="${build.dir}" includeemptydirs="true" quiet="true">
    
</delete></pre>
<pre>   <target name="jar-resources" description="Create a jar with all the resources -> dist/resources.jar">
       <!-- Copy the resources to dist/tmp/ maintaining the directory structure res.dir is the root directory. -->
       <copy todir="${dist.dir}/tmp/${res.dir}">
           <fileset dir="${res.dir}">
       </fileset></copy>
</target></pre>
<pre>       <!-- Jar and delete the temp resource dir -->
       <jar destfile="${dist.dir}/resources.jar" basedir="${dist.dir}/tmp/">
       <delete dir="${dist.dir}/tmp" includeemptydirs="true" quiet="true">
    
</delete></jar></pre>
<pre>   <target name="webstart" depends="jar-source, jar-resources" description="Deploy as jnlp webstart">
       <!--
           Copy all required jars from lib to dist
           Skip jars already provided by the slick extension
       -->
       <copy todir="${dist.dir}">
           <fileset dir="${lib.dir}" includes="*.jar">
               <exclude name="slick.jar">
               <exclude name="ibxm.jar">
               <exclude name="jogg-0.0.7.jar">
               <exclude name="jorbis-0.0.15.jar">
               <exclude name="lwjgl.jar">
               <exclude name="lwjgl_util.jar">
               <exclude name="jinput.jar">
           </exclude></exclude></exclude></exclude></exclude></exclude></exclude></fileset>
       </copy>
</target></pre>
<pre>       <!-- Sign all the jars in the dist dir -->
       <antcall target="signjars">
</antcall></pre>
<pre>       <!--
           Use the JNLPTask to create a jnlp file
           see http://ovanttasks.sourceforge.net/rat/chapter-N104F5.html
        -->
       <jnlp tofile="${dist.dir}/${game.name}.jnlp" codebase="${webstart.codebase}">
           <information>
               <title>${webstart.title}</title>
               <vendor>${webstart.vendor}</vendor>
               <homepage href="${webstart.homepage}">
               <description kind="short">${webstart.description}</description>
</homepage></information></jnlp></pre>
<pre>               <shortcut online="true">
                   <desktop>
               </desktop></shortcut>
            
</pre>
<pre>           <security>
               <all_permissions>
           </all_permissions></security>
</pre>
<pre>           <resources>
               <jar>
                   <fileset dir="${dist.dir}">
                       <include name="*.jar">
                   </include></fileset>
               </jar>
               <extension href="http://slick.cokeandcode.com/demos/slick.jnlp">
           </extension></resources>
</pre>
<pre>           <application_desc main_class="${game.main.class}">
        
    
</application_desc></pre>
<pre>   <target name="applet" depends="jar-source, jar-resources" description="Deploy as a lwjgl Applet">
       <!--
           Copy all required jars from lib to dist
           Skip jars already provided by the lwjgl applet
       -->
       <copy todir="${dist.dir}">
           <fileset dir="${lib.dir}" includes="*.jar">
               <exclude name="jinput.jar">
           </exclude></fileset>
       </copy>
</target></pre>
<pre>       <!-- Sign all the jars in the dist dir -->
       <antcall target="signjars">
</antcall></pre>
<pre>       <!-- Separate each jar file name by a ',' and store in ${game_jars} -->
       <fileset id="game_jars_fileset" dir="${dist.dir}" includes="*.jar">
</fileset></pre>
        <pathconvert pathsep=", " property="game_jars" refid="game_jars_fileset">
            <mapper type="flatten">
        </mapper></pathconvert>
<pre>       <!-- Copy the lwjgl applet launcher + natives to dist -->
       <copy todir="${dist.dir}">
           <fileset dir="external/lwjglApplet">
               <include name="*.lzma">
               <include name="*.jar">
           </include></include></fileset>
       </copy>
</pre>
<pre>       <copy file="external/lwjglApplet/appletloader.html" tofile="${dist.dir}/appletloader.html">
           <filterchain>
               <replacetokens>
                   <token key="title" value="${applet.title}">
                   <token key="game_name" value="${game.name}">
                   <token key="width" value="${applet.width}">
                   <token key="height" value="${applet.height}">
                   <token key="mainclass" value="${game.main.class}">
                   <token key="game_jars" value="${game_jars}">
               </token></token></token></token></token></token></replacetokens>
           </filterchain>
       </copy>
    
</pre>
<pre>   <target name="fatjar" description="Prepare jar files to be used with the fatjar tool." depends="jar-source, jar-resources">
       <!-- Copy all required jars from lib to dist -->
       <copy todir="${dist.dir}">
           <fileset dir="${lib.dir}" includes="*.jar">
       </fileset></copy>
   </target>
</pre>
<pre>   <target name="signjars" depends="create-keystore" description="Sign's all the jars in the dist dir">
       <input message="Username:" addproperty="keystore.username" defaultvalue="${user.name}"></input>
       <input message="Password:" addproperty="keystore.pass"></input>
</target></pre>
<pre>       <signjar keystore="${keystore.file.name}" storepass="${keystore.pass}" alias="${keystore.username}" preservelastmodified="true">
</signjar></pre>
            <path>
                <fileset dir="${dist.dir}" includes="*.jar">
            </fileset></path>
<pre>       
    
</pre>
<pre>   <target name="create-keystore" depends="check-for-keystore" unless="keystore.present" description="Create a key store, unless it already exists">
       <input message="Keystore Username:" addproperty="keystore.username"></input>
       <input message="Keystore Password:" addproperty="keystore.pass"></input>
       <input message="City/Location:" addproperty="keystore.location"></input>
       <input message="2 Letter Country code:" addproperty="keystore.country"></input>
</target></pre>
<pre>       <genkey keystore="${keystore.file.name}" alias="${keystore.username}" storepass="${keystore.pass}">
           <dname>
</dname></genkey></pre>
                <param name="CN" value="${keystore.username}">
                <param name="OU" value="">
                <param name="O" value="">
                <param name="L" value="${keystore.location}">
                <param name="ST" value="">
                <param name="C" value="${keystore.country}">
             
         
     
 
    <target name="check-for-keystore" description="Determines whether the keystore exists.">
        <available file="${keystore.file.name}" type="file" property="keystore.present">
    </available></target>
</property></property></property></property></property></property></property></property></property></property></property></property></property></property></property></property></property></project></param></param></param></param></param></param></param></param>